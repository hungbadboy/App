<!DOCTYPE html>
<html>
  <head>
    <title>{{title}}</title>
      <!-- 1. skin -->
      <link rel="stylesheet" href="//releases.flowplayer.org/7.0.4/skin/skin.css">

      <!-- 2. jquery library - required for video tag based installs -->
      <script src="//code.jquery.com/jquery-1.12.4.min.js"></script>
    <link rel='stylesheet' href='/stylesheets/style.css' />
      <!-- Flowplayer library -->
      <script src="//releases.flowplayer.org/7.0.4/flowplayer.min.js"></script>
      <!-- Flowplayer hlsjs engine (light) -->
      <script src="//releases.flowplayer.org/hlsjs/flowplayer.hlsjs.light.min.js"></script>
      <script>
          // Retrieve Firebase Messaging object.
          const messaging = firebase.messaging();
          messaging.requestPermission()
              .then(function () {
                  console.log('Notification permission granted.');
                  // TODO(developer): Retrieve an Instance ID token for use with FCM.
                  // ...
              })
              .catch(function (err) {
                  console.log('Unable to get permission to notify.', err);
              });
          // Get Instance ID token. Initially this makes a network call, once retrieved
          // subsequent calls to getToken will return from cache.
          messaging.getToken()
              .then(function(currentToken) {
                  if (currentToken) {
                      sendTokenToServer(currentToken);
                      updateUIForPushEnabled(currentToken);
                  } else {
                      // Show permission request.
                      console.log('No Instance ID token available. Request permission to generate one.');
                      // Show permission UI.
                      updateUIForPushPermissionRequired();
                      setTokenSentToServer(false);
                  }
              })
              .catch(function(err) {
                  console.log('An error occurred while retrieving token. ', err);
                  showToken('Error retrieving Instance ID token. ', err);
                  setTokenSentToServer(false);
              });

          // Callback fired if Instance ID token is updated.
          messaging.onTokenRefresh(function() {
              messaging.getToken()
                      .then(function(refreshedToken) {
                          console.log('Token refreshed.');
                          // Indicate that the new Instance ID token has not yet been sent to the
                          // app server.
                          setTokenSentToServer(false);
                          // Send Instance ID token to app server.
                          sendTokenToServer(refreshedToken);
                          // ...
                      })
                      .catch(function(err) {
                          console.log('Unable to retrieve refreshed token ', err);
                          showToken('Unable to retrieve refreshed token ', err);
                      });
          });

          // Handle incoming messages. Called when:
          // - a message is received while the app has focus
          // - the user clicks on an app notification created by a sevice worker
          //   `messaging.setBackgroundMessageHandler` handler.
          messaging.onMessage(function(payload) {
              console.log("Message received. ", payload);
              // ...
          });
      </script>
  </head>
  <body>
    {{{body}}}
  </body>
</html>
